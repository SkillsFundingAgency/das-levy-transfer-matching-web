@using System.Collections
@using Microsoft.AspNetCore.Mvc.ModelBinding
@if (!ViewData.ModelState.IsValid)
{
    <div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="govuk-error-summary">
        <h2 class="govuk-error-summary__title" id="error-summary-title">
            There is a problem
        </h2>
        <div class="govuk-error-summary__body">
            <ul class="govuk-list govuk-error-summary__list">
                
                @{
                    var explorer = ViewData.ModelExplorer;
                    foreach (var property in explorer.Properties)
                    {
                        // Need to explicitly check that the type isn't string -
                        // Because it implements IEnumerable<>.
                        var errors = (typeof(IEnumerable).IsAssignableFrom(property.ModelType) && property.ModelType != typeof(string))
                            ? GetErrorsForIEnumerable(property.Metadata)
                            : GetErrors(property.Metadata);

                        foreach (var error in errors)
                        {
                            <li>
                                <a href="#@error.Key">
                                    <span class="govuk-visually-hidden">Error: </span>@error.Value
                                </a>
                            </li>
                        }
                    }
                }

            </ul>
        </div>
    </div>
}



@functions{

    Dictionary<string, string> GetErrors(ModelMetadata property)
    {
        var result = new Dictionary<string, string>();

        var state = ViewData.ModelState[property.PropertyName];

        var errors = state?.Errors ?? null;

        if (errors != null)
        {
            foreach (var error in errors)
            {
                result.Add(property.PropertyName, error.ErrorMessage);
            }

        }

        return result;

    }

    Dictionary<string, string> GetErrorsForIEnumerable(ModelMetadata property)
    {
        var result = new Dictionary<string, string>();

        var propertyErrors = ViewData.ModelState[property.PropertyName]?.Errors;
        if (propertyErrors != null && propertyErrors.Any())
            result.Add(property.PropertyName, propertyErrors.First().ErrorMessage);

        var i = 0;
        while (true)
        {
            var key = $"{property.PropertyName}[{i}]";

            if (!ViewData.ModelState.ContainsKey(key))
            {
                break;
            }
            else
            {
                var state = ViewData.ModelState[key];
                var errors = state?.Errors ?? null;
                if (errors != null)
                {
                    foreach (var error in errors)
                    {
                        result.Add($"{property.PropertyName}_{i}_", error.ErrorMessage);
                    }
                }
            }

            i++;
        }

        return result;

    }

}